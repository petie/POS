// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost:5000".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ChangeQuantityRequest
 */
export interface ChangeQuantityRequest {
    /**
     * 
     * @type {number}
     * @memberof ChangeQuantityRequest
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ChangeQuantityRequest
     */
    quantity?: number;
}

/**
 * 
 * @export
 * @interface PaymentInfo
 */
export interface PaymentInfo {
    /**
     * 
     * @type {number}
     * @memberof PaymentInfo
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentInfo
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentInfo
     */
    amountPayed?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentInfo
     */
    change?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentInfo
     */
    isPayed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PaymentInfo
     */
    receiptId?: number;
    /**
     * 
     * @type {Date}
     * @memberof PaymentInfo
     */
    dateCreated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PaymentInfo
     */
    dateModified?: Date;
}

/**
 * 
 * @export
 * @interface PaymentPayload
 */
export interface PaymentPayload {
    /**
     * 
     * @type {number}
     * @memberof PaymentPayload
     */
    paymentId?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentPayload
     */
    amount?: number;
}

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    ean?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    unit?: string | null;
    /**
     * 
     * @type {Tax}
     * @memberof Product
     */
    tax?: Tax | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    taxId?: number;
}

/**
 * 
 * @export
 * @interface Receipt
 */
export interface Receipt {
    /**
     * 
     * @type {number}
     * @memberof Receipt
     */
    id?: number;
    /**
     * 
     * @type {Array<ReceiptItem>}
     * @memberof Receipt
     */
    items?: Array<ReceiptItem> | null;
    /**
     * 
     * @type {Array<ReceiptItem>}
     * @memberof Receipt
     */
    allItems?: Array<ReceiptItem> | null;
    /**
     * 
     * @type {PaymentInfo}
     * @memberof Receipt
     */
    payment?: PaymentInfo | null;
    /**
     * 
     * @type {number}
     * @memberof Receipt
     */
    shiftId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Receipt
     */
    isCancelled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Receipt
     */
    isClosed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Receipt
     */
    total?: number;
    /**
     * 
     * @type {Date}
     * @memberof Receipt
     */
    dateCreated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Receipt
     */
    dateModified?: Date;
}

/**
 * 
 * @export
 * @interface ReceiptItem
 */
export interface ReceiptItem {
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    ordinalNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof ReceiptItem
     */
    ean?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReceiptItem
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    price?: number;
    /**
     * 
     * @type {string}
     * @memberof ReceiptItem
     */
    unit?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    productId?: number;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    quantity?: number;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    value?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ReceiptItem
     */
    isRemoved?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    receiptId?: number;
    /**
     * 
     * @type {Date}
     * @memberof ReceiptItem
     */
    dateCreated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ReceiptItem
     */
    dateModified?: Date;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    taxValue?: number;
    /**
     * 
     * @type {number}
     * @memberof ReceiptItem
     */
    taxRate?: number;
}

/**
 * 
 * @export
 * @interface Shift
 */
export interface Shift {
    /**
     * 
     * @type {number}
     * @memberof Shift
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof Shift
     */
    startDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Shift
     */
    endDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof Shift
     */
    startMoney?: number;
    /**
     * 
     * @type {number}
     * @memberof Shift
     */
    startDeposit?: number;
    /**
     * 
     * @type {number}
     * @memberof Shift
     */
    numberOfReceipts?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Shift
     */
    isClosed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Shift
     */
    isOpen?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Shift
     */
    cancelledReceiptsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Shift
     */
    removedItemsCount?: number;
    /**
     * 
     * @type {Array<Receipt>}
     * @memberof Shift
     */
    receipts?: Array<Receipt> | null;
    /**
     * 
     * @type {number}
     * @memberof Shift
     */
    endMoney?: number;
}

/**
 * 
 * @export
 * @interface ShiftStartPayload
 */
export interface ShiftStartPayload {
    /**
     * 
     * @type {number}
     * @memberof ShiftStartPayload
     */
    depositAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof ShiftStartPayload
     */
    shiftId?: number;
}

/**
 * 
 * @export
 * @interface Tax
 */
export interface Tax {
    /**
     * 
     * @type {number}
     * @memberof Tax
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Tax
     */
    symbol?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tax
     */
    fiscalSymbol?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Tax
     */
    value?: number;
}


/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an empty payment object for the current receipt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentCreate(options: any = {}): RequestArgs {
            const localVarPath = `/api/Payment`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get payment summary for a given receipt
         * @param {number} receiptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentGet(receiptId: number, options: any = {}): RequestArgs {
            // verify required parameter 'receiptId' is not null or undefined
            if (receiptId === null || receiptId === undefined) {
                throw new RequiredError('receiptId','Required parameter receiptId was null or undefined when calling paymentGet.');
            }
            const localVarPath = `/api/Payment/{receiptId}`
                .replace(`{${"receiptId"}}`, encodeURIComponent(String(receiptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm payment of receipt
         * @param {PaymentPayload} paymentPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPayAmount(paymentPayload: PaymentPayload, options: any = {}): RequestArgs {
            // verify required parameter 'paymentPayload' is not null or undefined
            if (paymentPayload === null || paymentPayload === undefined) {
                throw new RequiredError('paymentPayload','Required parameter paymentPayload was null or undefined when calling paymentPayAmount.');
            }
            const localVarPath = `/api/Payment/pay`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PaymentPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(paymentPayload || {}) : (paymentPayload || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an empty payment object for the current receipt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentCreate(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInfo> {
            const localVarAxiosArgs = PaymentApiAxiosParamCreator(configuration).paymentCreate(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Get payment summary for a given receipt
         * @param {number} receiptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentGet(receiptId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInfo> {
            const localVarAxiosArgs = PaymentApiAxiosParamCreator(configuration).paymentGet(receiptId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Confirm payment of receipt
         * @param {PaymentPayload} paymentPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPayAmount(paymentPayload: PaymentPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInfo> {
            const localVarAxiosArgs = PaymentApiAxiosParamCreator(configuration).paymentPayAmount(paymentPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create an empty payment object for the current receipt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentCreate(options?: any) {
            return PaymentApiFp(configuration).paymentCreate(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get payment summary for a given receipt
         * @param {number} receiptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentGet(receiptId: number, options?: any) {
            return PaymentApiFp(configuration).paymentGet(receiptId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Confirm payment of receipt
         * @param {PaymentPayload} paymentPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPayAmount(paymentPayload: PaymentPayload, options?: any) {
            return PaymentApiFp(configuration).paymentPayAmount(paymentPayload, options)(axios, basePath);
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @summary Create an empty payment object for the current receipt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public paymentCreate(options?: any) {
        return PaymentApiFp(this.configuration).paymentCreate(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get payment summary for a given receipt
     * @param {number} receiptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public paymentGet(receiptId: number, options?: any) {
        return PaymentApiFp(this.configuration).paymentGet(receiptId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Confirm payment of receipt
     * @param {PaymentPayload} paymentPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public paymentPayAmount(paymentPayload: PaymentPayload, options?: any) {
        return PaymentApiFp(this.configuration).paymentPayAmount(paymentPayload, options)(this.axios, this.basePath);
    }

}

/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetAll(options: any = {}): RequestArgs {
            const localVarPath = `/api/Product`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product by EAN code
         * @param {string} eanCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetProduct(eanCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'eanCode' is not null or undefined
            if (eanCode === null || eanCode === undefined) {
                throw new RequiredError('eanCode','Required parameter eanCode was null or undefined when calling productGetProduct.');
            }
            const localVarPath = `/api/Product/ean/{eanCode}`
                .replace(`{${"eanCode"}}`, encodeURIComponent(String(eanCode)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find product by Id
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetProduct2(productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling productGetProduct2.');
            }
            const localVarPath = `/api/Product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find product by EAN code
         * @param {string} eanCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearchProduct(eanCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'eanCode' is not null or undefined
            if (eanCode === null || eanCode === undefined) {
                throw new RequiredError('eanCode','Required parameter eanCode was null or undefined when calling productSearchProduct.');
            }
            const localVarPath = `/api/Product/ean/search/{eanCode}`
                .replace(`{${"eanCode"}}`, encodeURIComponent(String(eanCode)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetAll(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).productGetAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Get product by EAN code
         * @param {string} eanCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetProduct(eanCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).productGetProduct(eanCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Find product by Id
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetProduct2(productId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).productGetProduct2(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Find product by EAN code
         * @param {string} eanCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearchProduct(eanCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).productSearchProduct(eanCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetAll(options?: any) {
            return ProductApiFp(configuration).productGetAll(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get product by EAN code
         * @param {string} eanCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetProduct(eanCode: string, options?: any) {
            return ProductApiFp(configuration).productGetProduct(eanCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary Find product by Id
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetProduct2(productId: number, options?: any) {
            return ProductApiFp(configuration).productGetProduct2(productId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Find product by EAN code
         * @param {string} eanCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearchProduct(eanCode: string, options?: any) {
            return ProductApiFp(configuration).productSearchProduct(eanCode, options)(axios, basePath);
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary Get all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productGetAll(options?: any) {
        return ProductApiFp(this.configuration).productGetAll(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get product by EAN code
     * @param {string} eanCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productGetProduct(eanCode: string, options?: any) {
        return ProductApiFp(this.configuration).productGetProduct(eanCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Find product by Id
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productGetProduct2(productId: number, options?: any) {
        return ProductApiFp(this.configuration).productGetProduct2(productId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Find product by EAN code
     * @param {string} eanCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productSearchProduct(eanCode: string, options?: any) {
        return ProductApiFp(this.configuration).productSearchProduct(eanCode, options)(this.axios, this.basePath);
    }

}

/**
 * ReceiptApi - axios parameter creator
 * @export
 */
export const ReceiptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new line item by EAN code
         * @param {string} ean 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptAdd(ean: string, options: any = {}): RequestArgs {
            // verify required parameter 'ean' is not null or undefined
            if (ean === null || ean === undefined) {
                throw new RequiredError('ean','Required parameter ean was null or undefined when calling receiptAdd.');
            }
            const localVarPath = `/api/Receipt/{ean}`
                .replace(`{${"ean"}}`, encodeURIComponent(String(ean)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change the quantity of a given item on the receipt
         * @param {ChangeQuantityRequest} changeQuantityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptChangeQuantity(changeQuantityRequest: ChangeQuantityRequest, options: any = {}): RequestArgs {
            // verify required parameter 'changeQuantityRequest' is not null or undefined
            if (changeQuantityRequest === null || changeQuantityRequest === undefined) {
                throw new RequiredError('changeQuantityRequest','Required parameter changeQuantityRequest was null or undefined when calling receiptChangeQuantity.');
            }
            const localVarPath = `/api/Receipt/change`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangeQuantityRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changeQuantityRequest || {}) : (changeQuantityRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start a new receipt and return its Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptCreateReceipt(options: any = {}): RequestArgs {
            const localVarPath = `/api/Receipt`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the whole receipt
         * @param {number} receiptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptDelete(receiptId: number, options: any = {}): RequestArgs {
            // verify required parameter 'receiptId' is not null or undefined
            if (receiptId === null || receiptId === undefined) {
                throw new RequiredError('receiptId','Required parameter receiptId was null or undefined when calling receiptDelete.');
            }
            const localVarPath = `/api/Receipt/{receiptId}`
                .replace(`{${"receiptId"}}`, encodeURIComponent(String(receiptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start a new receipt and return its Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptGetReceipt(options: any = {}): RequestArgs {
            const localVarPath = `/api/Receipt`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a receipt item by it's Id from a given receipt
         * @param {number} receiptId 
         * @param {number} receiptItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptRemove(receiptId: number, receiptItemId: number, options: any = {}): RequestArgs {
            // verify required parameter 'receiptId' is not null or undefined
            if (receiptId === null || receiptId === undefined) {
                throw new RequiredError('receiptId','Required parameter receiptId was null or undefined when calling receiptRemove.');
            }
            // verify required parameter 'receiptItemId' is not null or undefined
            if (receiptItemId === null || receiptItemId === undefined) {
                throw new RequiredError('receiptItemId','Required parameter receiptItemId was null or undefined when calling receiptRemove.');
            }
            const localVarPath = `/api/Receipt/{receiptId}/{receiptItemId}`
                .replace(`{${"receiptId"}}`, encodeURIComponent(String(receiptId)))
                .replace(`{${"receiptItemId"}}`, encodeURIComponent(String(receiptItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceiptApi - functional programming interface
 * @export
 */
export const ReceiptApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new line item by EAN code
         * @param {string} ean 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptAdd(ean: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptItem> {
            const localVarAxiosArgs = ReceiptApiAxiosParamCreator(configuration).receiptAdd(ean, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Change the quantity of a given item on the receipt
         * @param {ChangeQuantityRequest} changeQuantityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptChangeQuantity(changeQuantityRequest: ChangeQuantityRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptItem> {
            const localVarAxiosArgs = ReceiptApiAxiosParamCreator(configuration).receiptChangeQuantity(changeQuantityRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Start a new receipt and return its Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptCreateReceipt(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = ReceiptApiAxiosParamCreator(configuration).receiptCreateReceipt(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Delete the whole receipt
         * @param {number} receiptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptDelete(receiptId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ReceiptApiAxiosParamCreator(configuration).receiptDelete(receiptId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Start a new receipt and return its Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptGetReceipt(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Receipt> {
            const localVarAxiosArgs = ReceiptApiAxiosParamCreator(configuration).receiptGetReceipt(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Remove a receipt item by it's Id from a given receipt
         * @param {number} receiptId 
         * @param {number} receiptItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptRemove(receiptId: number, receiptItemId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ReceiptApiAxiosParamCreator(configuration).receiptRemove(receiptId, receiptItemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * ReceiptApi - factory interface
 * @export
 */
export const ReceiptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add a new line item by EAN code
         * @param {string} ean 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptAdd(ean: string, options?: any) {
            return ReceiptApiFp(configuration).receiptAdd(ean, options)(axios, basePath);
        },
        /**
         * 
         * @summary Change the quantity of a given item on the receipt
         * @param {ChangeQuantityRequest} changeQuantityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptChangeQuantity(changeQuantityRequest: ChangeQuantityRequest, options?: any) {
            return ReceiptApiFp(configuration).receiptChangeQuantity(changeQuantityRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Start a new receipt and return its Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptCreateReceipt(options?: any) {
            return ReceiptApiFp(configuration).receiptCreateReceipt(options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete the whole receipt
         * @param {number} receiptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptDelete(receiptId: number, options?: any) {
            return ReceiptApiFp(configuration).receiptDelete(receiptId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Start a new receipt and return its Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptGetReceipt(options?: any) {
            return ReceiptApiFp(configuration).receiptGetReceipt(options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove a receipt item by it's Id from a given receipt
         * @param {number} receiptId 
         * @param {number} receiptItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiptRemove(receiptId: number, receiptItemId: number, options?: any) {
            return ReceiptApiFp(configuration).receiptRemove(receiptId, receiptItemId, options)(axios, basePath);
        },
    };
};

/**
 * ReceiptApi - object-oriented interface
 * @export
 * @class ReceiptApi
 * @extends {BaseAPI}
 */
export class ReceiptApi extends BaseAPI {
    /**
     * 
     * @summary Add a new line item by EAN code
     * @param {string} ean 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptApi
     */
    public receiptAdd(ean: string, options?: any) {
        return ReceiptApiFp(this.configuration).receiptAdd(ean, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Change the quantity of a given item on the receipt
     * @param {ChangeQuantityRequest} changeQuantityRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptApi
     */
    public receiptChangeQuantity(changeQuantityRequest: ChangeQuantityRequest, options?: any) {
        return ReceiptApiFp(this.configuration).receiptChangeQuantity(changeQuantityRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Start a new receipt and return its Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptApi
     */
    public receiptCreateReceipt(options?: any) {
        return ReceiptApiFp(this.configuration).receiptCreateReceipt(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete the whole receipt
     * @param {number} receiptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptApi
     */
    public receiptDelete(receiptId: number, options?: any) {
        return ReceiptApiFp(this.configuration).receiptDelete(receiptId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Start a new receipt and return its Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptApi
     */
    public receiptGetReceipt(options?: any) {
        return ReceiptApiFp(this.configuration).receiptGetReceipt(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove a receipt item by it's Id from a given receipt
     * @param {number} receiptId 
     * @param {number} receiptItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptApi
     */
    public receiptRemove(receiptId: number, receiptItemId: number, options?: any) {
        return ReceiptApiFp(this.configuration).receiptRemove(receiptId, receiptItemId, options)(this.axios, this.basePath);
    }

}

/**
 * ShiftApi - axios parameter creator
 * @export
 */
export const ShiftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary End the currently active shift
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftClose(options: any = {}): RequestArgs {
            const localVarPath = `/api/Shift/close`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create and return a new Shift object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftCreate(options: any = {}): RequestArgs {
            const localVarPath = `/api/Shift`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the active shift
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftGetCurrent(options: any = {}): RequestArgs {
            const localVarPath = `/api/Shift`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start the provided shift
         * @param {ShiftStartPayload} shiftStartPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftStart(shiftStartPayload: ShiftStartPayload, options: any = {}): RequestArgs {
            // verify required parameter 'shiftStartPayload' is not null or undefined
            if (shiftStartPayload === null || shiftStartPayload === undefined) {
                throw new RequiredError('shiftStartPayload','Required parameter shiftStartPayload was null or undefined when calling shiftStart.');
            }
            const localVarPath = `/api/Shift/start`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ShiftStartPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(shiftStartPayload || {}) : (shiftStartPayload || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShiftApi - functional programming interface
 * @export
 */
export const ShiftApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary End the currently active shift
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftClose(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shift> {
            const localVarAxiosArgs = ShiftApiAxiosParamCreator(configuration).shiftClose(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Create and return a new Shift object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftCreate(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shift> {
            const localVarAxiosArgs = ShiftApiAxiosParamCreator(configuration).shiftCreate(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Returns the active shift
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftGetCurrent(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shift> {
            const localVarAxiosArgs = ShiftApiAxiosParamCreator(configuration).shiftGetCurrent(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Start the provided shift
         * @param {ShiftStartPayload} shiftStartPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftStart(shiftStartPayload: ShiftStartPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shift> {
            const localVarAxiosArgs = ShiftApiAxiosParamCreator(configuration).shiftStart(shiftStartPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * ShiftApi - factory interface
 * @export
 */
export const ShiftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary End the currently active shift
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftClose(options?: any) {
            return ShiftApiFp(configuration).shiftClose(options)(axios, basePath);
        },
        /**
         * 
         * @summary Create and return a new Shift object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftCreate(options?: any) {
            return ShiftApiFp(configuration).shiftCreate(options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns the active shift
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftGetCurrent(options?: any) {
            return ShiftApiFp(configuration).shiftGetCurrent(options)(axios, basePath);
        },
        /**
         * 
         * @summary Start the provided shift
         * @param {ShiftStartPayload} shiftStartPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shiftStart(shiftStartPayload: ShiftStartPayload, options?: any) {
            return ShiftApiFp(configuration).shiftStart(shiftStartPayload, options)(axios, basePath);
        },
    };
};

/**
 * ShiftApi - object-oriented interface
 * @export
 * @class ShiftApi
 * @extends {BaseAPI}
 */
export class ShiftApi extends BaseAPI {
    /**
     * 
     * @summary End the currently active shift
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public shiftClose(options?: any) {
        return ShiftApiFp(this.configuration).shiftClose(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create and return a new Shift object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public shiftCreate(options?: any) {
        return ShiftApiFp(this.configuration).shiftCreate(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns the active shift
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public shiftGetCurrent(options?: any) {
        return ShiftApiFp(this.configuration).shiftGetCurrent(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Start the provided shift
     * @param {ShiftStartPayload} shiftStartPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public shiftStart(shiftStartPayload: ShiftStartPayload, options?: any) {
        return ShiftApiFp(this.configuration).shiftStart(shiftStartPayload, options)(this.axios, this.basePath);
    }

}

