// Decompiled with JetBrains decompiler
// Type: OnlineFPPosnetProtocol.CRC16
// Assembly: OnlineFPPosnetProtocol, Version=2018.0.1.0, Culture=neutral, PublicKeyToken=8b54098295e79123
// MVID: 619FDB08-8046-432B-AE81-BF4303AA2094
// Assembly location: C:\Program Files (x86)\Comarch OPT!MA Detal\drivers\OnlineFPPosnetProtocol.dll

using System;

namespace OnlineFPPosnetProtocol
{
  internal static class CRC16
  {
    private static byte[] crc16htab = new byte[256]
    {
      (byte) 0,
      (byte) 16,
      (byte) 32,
      (byte) 48,
      (byte) 64,
      (byte) 80,
      (byte) 96,
      (byte) 112,
      (byte) 129,
      (byte) 145,
      (byte) 161,
      (byte) 177,
      (byte) 193,
      (byte) 209,
      (byte) 225,
      (byte) 241,
      (byte) 18,
      (byte) 2,
      (byte) 50,
      (byte) 34,
      (byte) 82,
      (byte) 66,
      (byte) 114,
      (byte) 98,
      (byte) 147,
      (byte) 131,
      (byte) 179,
      (byte) 163,
      (byte) 211,
      (byte) 195,
      (byte) 243,
      (byte) 227,
      (byte) 36,
      (byte) 52,
      (byte) 4,
      (byte) 20,
      (byte) 100,
      (byte) 116,
      (byte) 68,
      (byte) 84,
      (byte) 165,
      (byte) 181,
      (byte) 133,
      (byte) 149,
      (byte) 229,
      (byte) 245,
      (byte) 197,
      (byte) 213,
      (byte) 54,
      (byte) 38,
      (byte) 22,
      (byte) 6,
      (byte) 118,
      (byte) 102,
      (byte) 86,
      (byte) 70,
      (byte) 183,
      (byte) 167,
      (byte) 151,
      (byte) 135,
      (byte) 247,
      (byte) 231,
      (byte) 215,
      (byte) 199,
      (byte) 72,
      (byte) 88,
      (byte) 104,
      (byte) 120,
      (byte) 8,
      (byte) 24,
      (byte) 40,
      (byte) 56,
      (byte) 201,
      (byte) 217,
      (byte) 233,
      (byte) 249,
      (byte) 137,
      (byte) 153,
      (byte) 169,
      (byte) 185,
      (byte) 90,
      (byte) 74,
      (byte) 122,
      (byte) 106,
      (byte) 26,
      (byte) 10,
      (byte) 58,
      (byte) 42,
      (byte) 219,
      (byte) 203,
      (byte) 251,
      (byte) 235,
      (byte) 155,
      (byte) 139,
      (byte) 187,
      (byte) 171,
      (byte) 108,
      (byte) 124,
      (byte) 76,
      (byte) 92,
      (byte) 44,
      (byte) 60,
      (byte) 12,
      (byte) 28,
      (byte) 237,
      (byte) 253,
      (byte) 205,
      (byte) 221,
      (byte) 173,
      (byte) 189,
      (byte) 141,
      (byte) 157,
      (byte) 126,
      (byte) 110,
      (byte) 94,
      (byte) 78,
      (byte) 62,
      (byte) 46,
      (byte) 30,
      (byte) 14,
      byte.MaxValue,
      (byte) 239,
      (byte) 223,
      (byte) 207,
      (byte) 191,
      (byte) 175,
      (byte) 159,
      (byte) 143,
      (byte) 145,
      (byte) 129,
      (byte) 177,
      (byte) 161,
      (byte) 209,
      (byte) 193,
      (byte) 241,
      (byte) 225,
      (byte) 16,
      (byte) 0,
      (byte) 48,
      (byte) 32,
      (byte) 80,
      (byte) 64,
      (byte) 112,
      (byte) 96,
      (byte) 131,
      (byte) 147,
      (byte) 163,
      (byte) 179,
      (byte) 195,
      (byte) 211,
      (byte) 227,
      (byte) 243,
      (byte) 2,
      (byte) 18,
      (byte) 34,
      (byte) 50,
      (byte) 66,
      (byte) 82,
      (byte) 98,
      (byte) 114,
      (byte) 181,
      (byte) 165,
      (byte) 149,
      (byte) 133,
      (byte) 245,
      (byte) 229,
      (byte) 213,
      (byte) 197,
      (byte) 52,
      (byte) 36,
      (byte) 20,
      (byte) 4,
      (byte) 116,
      (byte) 100,
      (byte) 84,
      (byte) 68,
      (byte) 167,
      (byte) 183,
      (byte) 135,
      (byte) 151,
      (byte) 231,
      (byte) 247,
      (byte) 199,
      (byte) 215,
      (byte) 38,
      (byte) 54,
      (byte) 6,
      (byte) 22,
      (byte) 102,
      (byte) 118,
      (byte) 70,
      (byte) 86,
      (byte) 217,
      (byte) 201,
      (byte) 249,
      (byte) 233,
      (byte) 153,
      (byte) 137,
      (byte) 185,
      (byte) 169,
      (byte) 88,
      (byte) 72,
      (byte) 120,
      (byte) 104,
      (byte) 24,
      (byte) 8,
      (byte) 56,
      (byte) 40,
      (byte) 203,
      (byte) 219,
      (byte) 235,
      (byte) 251,
      (byte) 139,
      (byte) 155,
      (byte) 171,
      (byte) 187,
      (byte) 74,
      (byte) 90,
      (byte) 106,
      (byte) 122,
      (byte) 10,
      (byte) 26,
      (byte) 42,
      (byte) 58,
      (byte) 253,
      (byte) 237,
      (byte) 221,
      (byte) 205,
      (byte) 189,
      (byte) 173,
      (byte) 157,
      (byte) 141,
      (byte) 124,
      (byte) 108,
      (byte) 92,
      (byte) 76,
      (byte) 60,
      (byte) 44,
      (byte) 28,
      (byte) 12,
      (byte) 239,
      byte.MaxValue,
      (byte) 207,
      (byte) 223,
      (byte) 175,
      (byte) 191,
      (byte) 143,
      (byte) 159,
      (byte) 110,
      (byte) 126,
      (byte) 78,
      (byte) 94,
      (byte) 46,
      (byte) 62,
      (byte) 14,
      (byte) 30
    };
    private static byte[] crc16ltab = new byte[256]
    {
      (byte) 0,
      (byte) 33,
      (byte) 66,
      (byte) 99,
      (byte) 132,
      (byte) 165,
      (byte) 198,
      (byte) 231,
      (byte) 8,
      (byte) 41,
      (byte) 74,
      (byte) 107,
      (byte) 140,
      (byte) 173,
      (byte) 206,
      (byte) 239,
      (byte) 49,
      (byte) 16,
      (byte) 115,
      (byte) 82,
      (byte) 181,
      (byte) 148,
      (byte) 247,
      (byte) 214,
      (byte) 57,
      (byte) 24,
      (byte) 123,
      (byte) 90,
      (byte) 189,
      (byte) 156,
      byte.MaxValue,
      (byte) 222,
      (byte) 98,
      (byte) 67,
      (byte) 32,
      (byte) 1,
      (byte) 230,
      (byte) 199,
      (byte) 164,
      (byte) 133,
      (byte) 106,
      (byte) 75,
      (byte) 40,
      (byte) 9,
      (byte) 238,
      (byte) 207,
      (byte) 172,
      (byte) 141,
      (byte) 83,
      (byte) 114,
      (byte) 17,
      (byte) 48,
      (byte) 215,
      (byte) 246,
      (byte) 149,
      (byte) 180,
      (byte) 91,
      (byte) 122,
      (byte) 25,
      (byte) 56,
      (byte) 223,
      (byte) 254,
      (byte) 157,
      (byte) 188,
      (byte) 196,
      (byte) 229,
      (byte) 134,
      (byte) 167,
      (byte) 64,
      (byte) 97,
      (byte) 2,
      (byte) 35,
      (byte) 204,
      (byte) 237,
      (byte) 142,
      (byte) 175,
      (byte) 72,
      (byte) 105,
      (byte) 10,
      (byte) 43,
      (byte) 245,
      (byte) 212,
      (byte) 183,
      (byte) 150,
      (byte) 113,
      (byte) 80,
      (byte) 51,
      (byte) 18,
      (byte) 253,
      (byte) 220,
      (byte) 191,
      (byte) 158,
      (byte) 121,
      (byte) 88,
      (byte) 59,
      (byte) 26,
      (byte) 166,
      (byte) 135,
      (byte) 228,
      (byte) 197,
      (byte) 34,
      (byte) 3,
      (byte) 96,
      (byte) 65,
      (byte) 174,
      (byte) 143,
      (byte) 236,
      (byte) 205,
      (byte) 42,
      (byte) 11,
      (byte) 104,
      (byte) 73,
      (byte) 151,
      (byte) 182,
      (byte) 213,
      (byte) 244,
      (byte) 19,
      (byte) 50,
      (byte) 81,
      (byte) 112,
      (byte) 159,
      (byte) 190,
      (byte) 221,
      (byte) 252,
      (byte) 27,
      (byte) 58,
      (byte) 89,
      (byte) 120,
      (byte) 136,
      (byte) 169,
      (byte) 202,
      (byte) 235,
      (byte) 12,
      (byte) 45,
      (byte) 78,
      (byte) 111,
      (byte) 128,
      (byte) 161,
      (byte) 194,
      (byte) 227,
      (byte) 4,
      (byte) 37,
      (byte) 70,
      (byte) 103,
      (byte) 185,
      (byte) 152,
      (byte) 251,
      (byte) 218,
      (byte) 61,
      (byte) 28,
      (byte) 127,
      (byte) 94,
      (byte) 177,
      (byte) 144,
      (byte) 243,
      (byte) 210,
      (byte) 53,
      (byte) 20,
      (byte) 119,
      (byte) 86,
      (byte) 234,
      (byte) 203,
      (byte) 168,
      (byte) 137,
      (byte) 110,
      (byte) 79,
      (byte) 44,
      (byte) 13,
      (byte) 226,
      (byte) 195,
      (byte) 160,
      (byte) 129,
      (byte) 102,
      (byte) 71,
      (byte) 36,
      (byte) 5,
      (byte) 219,
      (byte) 250,
      (byte) 153,
      (byte) 184,
      (byte) 95,
      (byte) 126,
      (byte) 29,
      (byte) 60,
      (byte) 211,
      (byte) 242,
      (byte) 145,
      (byte) 176,
      (byte) 87,
      (byte) 118,
      (byte) 21,
      (byte) 52,
      (byte) 76,
      (byte) 109,
      (byte) 14,
      (byte) 47,
      (byte) 200,
      (byte) 233,
      (byte) 138,
      (byte) 171,
      (byte) 68,
      (byte) 101,
      (byte) 6,
      (byte) 39,
      (byte) 192,
      (byte) 225,
      (byte) 130,
      (byte) 163,
      (byte) 125,
      (byte) 92,
      (byte) 63,
      (byte) 30,
      (byte) 249,
      (byte) 216,
      (byte) 187,
      (byte) 154,
      (byte) 117,
      (byte) 84,
      (byte) 55,
      (byte) 22,
      (byte) 241,
      (byte) 208,
      (byte) 179,
      (byte) 146,
      (byte) 46,
      (byte) 15,
      (byte) 108,
      (byte) 77,
      (byte) 170,
      (byte) 139,
      (byte) 232,
      (byte) 201,
      (byte) 38,
      (byte) 7,
      (byte) 100,
      (byte) 69,
      (byte) 162,
      (byte) 131,
      (byte) 224,
      (byte) 193,
      (byte) 31,
      (byte) 62,
      (byte) 93,
      (byte) 124,
      (byte) 155,
      (byte) 186,
      (byte) 217,
      (byte) 248,
      (byte) 23,
      (byte) 54,
      (byte) 85,
      (byte) 116,
      (byte) 147,
      (byte) 178,
      (byte) 209,
      (byte) 240
    };
    private static string[] HexChars = new string[16]
    {
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F"
    };

    public static string CalculateCRC(byte[] input)
    {
      byte num1 = 0;
      byte num2 = 0;
      for (uint index = 0; (long) index < (long) input.Length; ++index)
      {
        ushort num3 = (ushort) ((uint) num1 ^ (uint) input[(IntPtr) index]);
        num1 = (byte) ((uint) num2 ^ (uint) CRC16.crc16htab[(int) num3]);
        num2 = CRC16.crc16ltab[(int) num3];
      }
      int index1 = (int) num1 / 16;
      int index2 = (int) num1 % 16;
      int index3 = (int) num2 / 16;
      int index4 = (int) num2 % 16;
      return CRC16.HexChars[index1] + CRC16.HexChars[index2] + CRC16.HexChars[index3] + CRC16.HexChars[index4];
    }
  }
}
